migrants[,5] = mean(population[population[,9]==1,5,drop=FALSE])
population   = rbind(population, migrants)
totalinds    = totalinds + runvars$nimmigrants[r] + 1
}
offspring = NULL
parents   = NULL
repros    = population[population[,9] == 1, ,drop=FALSE] # are alive
if(nrow(repros)>2){
repros = repros[repros[,2] >= runvars$maturity[r], ,drop=FALSE]  # are adults
if(nrow(repros)>2){
if(n.wild.offspring>0){
wild.pairs = Pairs(n.offs = n.wild.offspring, runvars$fecundity[r])
offspring  = Repro(repros, wild.pairs, runvars$RRS[r], runvars$RRSvar[r], runvars$fecundity[r], runvars$maturity[r], g, runvars$nloci[r], population, cappop, totalinds, migrants, runvars$selection[r])
remove(wild.pairs)
# add wild born individuals to IDcount (if there were any)
if(!is.null(nrow(offspring))){
totalinds = totalinds + length(offspring[,1]) + 1
parents   = unique(c(offspring[,3], offspring[,4]))
}
}
}
}
remove(Nt, numberoffspring, n.wild.offspring, n.captive.offspring, repros, migrants)
#### Some more death, add new of year ####
# kill adults that die this year, after reproduction
population = AdultMortality(population, g, runvars$adultmort[r], runvars$killimmat[r], runvars$maturity[r], parents, runvars$lifespan[r], runvars$repro1[r], alldead)
# add new of year to object
population = rbind(population, offspring, coffspring)
remove(parents, offspring, coffspring)
##### Age and write to file ####
# increase age by 1 year
population = AgeUp(population, alldead)
# determine current population size and plot it
if(runvars$plotit[r]==1){
Na      = c(Na, nrow(population[population[,9]==1, ,drop=FALSE]))
alive   = population[population[,9]==1, ,drop=FALSE]
Nadults = c(Nadults, nrow(alive[alive[,2] >= runvars$maturity[r],,drop=FALSE]))
lines(c(0:g), Na , xlab="generation", ylab="population size", cex = 2, lty = 1, col="black", lwd=5)
lines(c(0:g), Nadults , xlab="generation", ylab="population size", cex = 2, lty = 1, col="blue", lwd=5)
remove(alive)
}
# write info for all dead individuals, then remove all dead from population object
AllDead(alldead, population, runvars$outdir[r], r)
alldead <<- 3
population = population[population[,9]==1,,drop=FALSE]
# look for extinct populations (before immigration makes it no longer extinct)
if(nrow(population[population[,9]==1, ,drop=FALSE])<2){break}
}
# calulate and writeout summary information
WriteOut(runvars, r)
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation = c(0, 400)           #peak elevation min and max
landscape = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs    = 50                  #number of individuals to simulate
nsteps    = 500                 #number of steps an individual can take
move      = 0.8                 #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
#initialize landscape
land = LandscapeInit(elevation)
image(land)
pop = matrix(nrow=nindvs, ncol=2)
#choose rough starting position
x = sample(1:landscape, 1)
y = sample(1:landscape, 1)
View(land)
#set starting locations with set variance from x,y selected above
variance = 10 #values is in cells
?rnorm
rnorm(indvs, mean=x, sd=variance)
rnorm(nindvs, mean=x, sd=variance)
?rpois
rpois(nindvs, variance)
x
pop[,1]  = x + rpois(nindvs, variance)
pop[,2]  = y + rpois(nindvs, variance)
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
pop
image(land)
points(pop[,1]/150, pop[,2]/150)
?points
image(land)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.8)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.8)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.8)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.8)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.8)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation = c(0, 400)           #peak elevation min and max
landscape = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs    = 50                  #number of individuals to simulate
nsteps    = 500                 #number of steps an individual can take
move      = 0.8                 #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
#initialize landscape
land = LandscapeInit(elevation)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
pop
pop/150
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation = c(0, 400)           #peak elevation min and max
landscape = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs    = 50                  #number of individuals to simulate
nsteps    = 500                 #number of steps an individual can take
move      = 0.8                 #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
#initialize landscape
land = LandscapeInit(elevation)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
points
pop
pop/150
plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
points(pop[,1], pop[,2], pch=19, cex=0.5)
pop
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1], pop[,2], pch=19, cex=0.5)
pop
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1], pop[,2], pch=19, cex=0.5)
pop
points(pop[,1], pop[,2], pch=19)
pop[,1]
pop[,2]
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1], pop[,2], pch=19)
image(land)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
points(pop[,1], pop[,2], pch=19)
plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
points(pop[,1], pop[,2], pch=19, cex=0.5)
setwd("/Users/jannawilloughby/GDrive/ABMs/captivebreeding-IBM/")  #set working directory
directory = getwd()
outdir    = paste(directory,"/output/",sep="")                    #directory to save model output
source(paste(directory, "/source/FunctionSourcer.R", sep = ''))   #source functions and set source directory
repeats = 1                                                       #number of time to repeat simulations
plotit  <<- 1                                                     #toggle population size plotting 0=off, 1=on
species = "crane"                                                 #"crane" "tamarin" "toad" "salmon" "other" (parameters values listed below)
#species parameters
if(species=="crane")  { fecundity.V = 1;   maturity.V  = 5;  lifespan.V  = 23; repro1.V = 1; K.V = 500 }   #fecundity - modified by RRS for each pair
if(species=="tamarin"){ fecundity.V = 2;   maturity.V  = 2;  lifespan.V  = 8;  repro1.V = 1; K.V = 500 }   #maturity  - number of years to reach sexual maturity
if(species=="toad")   { fecundity.V = 30;  maturity.V  = 4;  lifespan.V  = 10; repro1.V = 1; K.V = 500 }   #lifespan  - maximum
if(species=="salmon") { fecundity.V = 500; maturity.V  = 4;  lifespan.V  = 7;  repro1.V = 0; K.V = 500 }   #repro1    - can individuals reproduce multiple times in a lifetime? 1 = yes, 0 = no
if(species=="other")  { fecundity.V = 100; maturity.V  = 2;  lifespan.V  = 5;  repro1.V = 0; K.V = 500 }   #K         - values for setting total pop to 250
#variables
N.V          = K.V                                               #intial population size
gens.V       = 250                                               #number years to simulate plus lifespan
RRS.V        = c(seq(0,0.275,0.025), seq(0.3,1,0.1))             #relative reproductive success penelty for captive born individuals
RRSvar.V     = 0.005                                             #variance in repro success, initiated when RRS is assigned
r0.V         = 0.1                                               #per capita growth rate
l.V          = 5                                                 #adult density independent mortality (adds variance)
nloci.V      = 50                                                #number of loci
countimmat.V = 1                                                 #count immature individuals in Nt? 0 = no, 1 = yes
killimmat.V  = 1                                                 #kill immature in adult mortality step? 0 = no, 1 = yes
adultmort.V  = (1/(lifespan.V-2))                                #proportion of adults that die after reproduction each year
#variables for captive breeding
startcap.V  = c(75,1000)                                         #year to start introduction of captive individuals (1000 = no captive breeding)
endcap.V    = 125                                                #year to end introduction of captive individuals
capfound.V  = 0.15                                               #proportion of captive founders needed every generation
newfound.V  = 1                                                  #1=all new founders every generation, 0=some new some old
propnew.V   = 1                                                  #frequency to supplement/add individuals to popualtion
caplife.V   = 1*lifespan.V                                       #lifespan of captive individuals, relative to lifespan.V
coffprop.V  = 1                                                  #proportion of offspring from cap relative to wild
#control reproduction in captivity
equalcaptive.V  = 0                                              #reproduction in captivity is divided equally (0=n, 1=y)
allonecaptive.V = 0                                              #reproduction in captivity is all from one pair (0=n, 1=y)
capvariation.V  = 1                                              #variation set up similar to wild, currently modified in code
#environmental variables
poorenv.V   = 75                                                 #generation to start removing individuals
fixedenv.V  = 125                                                #generation to end removing individuals
lossperct.V = 0.5                                                #proportion of individuals to remove
#other
nimmigrants.V = 1                                                #number of effective migrants per generation
propkill.V    = 0.5                                              #proportion to assume die before Nt count
selection     = 0                                                #switch for adding strong selection (0 off, value = strength)
runvars = Replicates(repeats, K.V, N.V, gens.V, RRS.V, RRSvar.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
startcap.V, endcap.V, capfound.V, newfound.V, propnew.V, caplife.V, coffprop.V,poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, equalcaptive.V, allonecaptive.V, capvariation.V, directory, outdir, plotit, species, selection)
remove(repeats, K.V, N.V, gens.V, RRS.V, RRSvar.V, r0.V, l.V, nloci.V, countimmat.V, killimmat.V, adultmort.V, fecundity.V, maturity.V, lifespan.V, repro1.V,
startcap.V, endcap.V, capfound.V, newfound.V, propnew.V, caplife.V, coffprop.V,poorenv.V, fixedenv.V, lossperct.V, nimmigrants.V,
propkill.V, equalcaptive.V, allonecaptive.V, capvariation.V,directory, outdir, plotit, species, selection)
r=1
#set initial age strucutre of population (equal proportion of all ages)
agestage   = data.frame(age = (1:runvars$lifespan[r]), num = rep(runvars$N[r]/(runvars$lifespan[r]*runvars$N[r]), runvars$lifespan[r]))
population = StartingPop(runvars$N[r], agestage, runvars$nloci[r])
otherpop   = StartingPop(10000, agestage, runvars$nloci[r])
otherpop   = otherpop[,11:(runvars$nloci[r]*2+10)]
remove(agestage)
#write starting population to file
write.table(population[0,], paste(runvars$outdir[r], "population_indvs", r, ".csv", sep=""), col.names=TRUE, row.names=FALSE, append=FALSE, sep=",")
#set up variables and ID number counter
totalinds  = length(population[,1]) + 1 #VariableForUniqueID
cappop     = NULL
alldead    <<- 0
#if plotting switch is on, plot population size
if(runvars$plotit[r]==1){
Na         = runvars$K[r]
Nadults    = c(nrow(population[population[,2]>=runvars$maturity[r],,drop=FALSE]))
plot(-100, -100 , xlab="generation", ylab="population size", xlim=c(0, (runvars$gens[r] + runvars$lifespan[r] + 1)), ylim=c(0, (runvars$K[r]*3)), type="b")
abline(runvars$K[r],0,lty=3, col="grey50")
abline(v=runvars$poorenv[r], lty=2, col="darkorange", lwd=2)
abline(v=runvars$fixedenv[r], lty=2, col="darkorange", lwd=2)
abline(v=runvars$startcap[r], lty=4, col="forestgreen", lwd=2)
abline(v=runvars$endcap[r], lty=4, col="forestgreen", lwd=2)
}
#### Simulate over years ####
for(g in 1:(runvars$gens[r] + runvars$lifespan[r] + 1)){ #(runvars$gens[r] + runvars$lifespan[r] + 1)
#### Captive sampling ####
if(g >= runvars$startcap[r] & g <= runvars$endcap[r] & g %% runvars$propnew[r] == 0){
#reset tracking variable
alldead <<- 0
# sample wild-born from wild population, mark as such in population
datasets   = SampleFounders(cappop, population, runvars$capfound[r], runvars$newfound[r], runvars$caplife[r], Nt, runvars$maturity[r], g, alldead, runvars$RRS[r], runvars$RRSvar[r])
cappop     = datasets$cappop
population = datasets$population
#captivedie = datasets$more
remove(datasets)
# check to be sure population is not extinct
if(alldead == 1){
population[,9] = 0
AllDead(alldead, population, runvars$outdir[r], r)
break
}
}
#### Some death ####
# remove offspring, proportional to RRS values
nalive     = nrow(population[population[,9]==1,,drop=FALSE])
population = RRSMortality(population, runvars$maturity[r])
nkilled    = nalive - nrow(population[population[,9]==1,,drop=FALSE])
#### Determine number of offspring to produce ####
# determine current population size
Nt = CalculateNt(population, runvars$countimmat[r], runvars$maturity[r])
if(is.null(Nt)){
alldead <<- 2
population[,9] = 0
AllDead(alldead, population, runvars$outdir[r], r)
break
}
# adjust value to compensate for proportion of adults killed before/after head count
Nt = Nt + round(nkilled * runvars$propkill[r])
remove(nalive, nkilled)
# determine future population size/number of offspring needed
numberoffspring     = NumberOffspring(Nt, runvars$K[r], runvars$r0[r], g, runvars$l[r], runvars$adultmort[r], agestage, runvars$coffprop[r], runvars$poorenv[r], runvars$fixedenv[r], runvars$lossperct[r], population)
n.captive.offspring = numberoffspring[1,1]
n.wild.offspring    = numberoffspring[1,2]
#### Captive reproduction #####
coffspring  = NULL
if(g >= runvars$startcap[r] & g <= runvars$endcap[r] & g %% runvars$propnew[r] == 0){
if(n.captive.offspring>0){
cap.pairs   = CaptivePairs(n.captive.offspring, runvars$fecundity[r], runvars$equalcaptive[r], runvars$allonecaptive[r], runvars$capvariation[r], cappop)
coffspring  = CaptiveRepro(cappop, cap.pairs, runvars$RRS[r], runvars$RRSvar[r], fecundity, runvars$maturity[r], g, runvars$nloci[r], population, totalinds)
remove(cap.pairs)
# add captive born individuals to count (if there were any)
if(!is.null(nrow(coffspring))){totalinds = totalinds + length(coffspring[,1]) + 1}
}
}
#### Wild reproduction ####
#get migrants if it is the correct year
migrants = NULL
if(runvars$nimmigrants[r]>0 & g %% runvars$maturity[r] == 0){
# add migrants for the year - all are mature adults
migrants     = Immigrant(runvars$nimmigrants[r], runvars$maturity[r], runvars$lifespan[r], totalinds, runvars$nloci[r], otherpop, g, runvars$RRS[r])
migrants[,5] = mean(population[population[,9]==1,5,drop=FALSE])
population   = rbind(population, migrants)
totalinds    = totalinds + runvars$nimmigrants[r] + 1
}
offspring = NULL
parents   = NULL
repros    = population[population[,9] == 1, ,drop=FALSE] # are alive
if(nrow(repros)>2){
repros = repros[repros[,2] >= runvars$maturity[r], ,drop=FALSE]  # are adults
if(nrow(repros)>2){
if(n.wild.offspring>0){
wild.pairs = Pairs(n.offs = n.wild.offspring, runvars$fecundity[r])
offspring  = Repro(repros, wild.pairs, runvars$RRS[r], runvars$RRSvar[r], runvars$fecundity[r], runvars$maturity[r], g, runvars$nloci[r], population, cappop, totalinds, migrants, runvars$selection[r])
remove(wild.pairs)
# add wild born individuals to IDcount (if there were any)
if(!is.null(nrow(offspring))){
totalinds = totalinds + length(offspring[,1]) + 1
parents   = unique(c(offspring[,3], offspring[,4]))
}
}
}
}
remove(Nt, numberoffspring, n.wild.offspring, n.captive.offspring, repros, migrants)
#### Some more death, add new of year ####
# kill adults that die this year, after reproduction
population = AdultMortality(population, g, runvars$adultmort[r], runvars$killimmat[r], runvars$maturity[r], parents, runvars$lifespan[r], runvars$repro1[r], alldead)
# add new of year to object
population = rbind(population, offspring, coffspring)
remove(parents, offspring, coffspring)
##### Age and write to file ####
# increase age by 1 year
population = AgeUp(population, alldead)
# determine current population size and plot it
if(runvars$plotit[r]==1){
Na      = c(Na, nrow(population[population[,9]==1, ,drop=FALSE]))
alive   = population[population[,9]==1, ,drop=FALSE]
Nadults = c(Nadults, nrow(alive[alive[,2] >= runvars$maturity[r],,drop=FALSE]))
lines(c(0:g), Na , xlab="generation", ylab="population size", cex = 2, lty = 1, col="black", lwd=5)
lines(c(0:g), Nadults , xlab="generation", ylab="population size", cex = 2, lty = 1, col="blue", lwd=5)
remove(alive)
}
# write info for all dead individuals, then remove all dead from population object
AllDead(alldead, population, runvars$outdir[r], r)
alldead <<- 3
population = population[population[,9]==1,,drop=FALSE]
# look for extinct populations (before immigration makes it no longer extinct)
if(nrow(population[population[,9]==1, ,drop=FALSE])<2){break}
}
#if plotting switch is on, plot population size
if(runvars$plotit[r]==1){
Na         = runvars$K[r]
Nadults    = c(nrow(population[population[,2]>=runvars$maturity[r],,drop=FALSE]))
plot(-100, -100 , xlab="generation", ylab="population size", xlim=c(0, (runvars$gens[r] + runvars$lifespan[r] + 1)), ylim=c(0, (runvars$K[r]*3)), type="b")
abline(runvars$K[r],0,lty=3, col="grey50")
abline(v=runvars$poorenv[r], lty=2, col="darkorange", lwd=2)
abline(v=runvars$fixedenv[r], lty=2, col="darkorange", lwd=2)
abline(v=runvars$startcap[r], lty=4, col="forestgreen", lwd=2)
abline(v=runvars$endcap[r], lty=4, col="forestgreen", lwd=2)
}
#### Simulate over years ####
for(g in 1:(runvars$gens[r] + runvars$lifespan[r] + 1)){ #(runvars$gens[r] + runvars$lifespan[r] + 1)
#### Captive sampling ####
if(g >= runvars$startcap[r] & g <= runvars$endcap[r] & g %% runvars$propnew[r] == 0){
#reset tracking variable
alldead <<- 0
# sample wild-born from wild population, mark as such in population
datasets   = SampleFounders(cappop, population, runvars$capfound[r], runvars$newfound[r], runvars$caplife[r], Nt, runvars$maturity[r], g, alldead, runvars$RRS[r], runvars$RRSvar[r])
cappop     = datasets$cappop
population = datasets$population
#captivedie = datasets$more
remove(datasets)
# check to be sure population is not extinct
if(alldead == 1){
population[,9] = 0
AllDead(alldead, population, runvars$outdir[r], r)
break
}
}
#### Some death ####
# remove offspring, proportional to RRS values
nalive     = nrow(population[population[,9]==1,,drop=FALSE])
population = RRSMortality(population, runvars$maturity[r])
nkilled    = nalive - nrow(population[population[,9]==1,,drop=FALSE])
#### Determine number of offspring to produce ####
# determine current population size
Nt = CalculateNt(population, runvars$countimmat[r], runvars$maturity[r])
if(is.null(Nt)){
alldead <<- 2
population[,9] = 0
AllDead(alldead, population, runvars$outdir[r], r)
break
}
# adjust value to compensate for proportion of adults killed before/after head count
Nt = Nt + round(nkilled * runvars$propkill[r])
remove(nalive, nkilled)
# determine future population size/number of offspring needed
numberoffspring     = NumberOffspring(Nt, runvars$K[r], runvars$r0[r], g, runvars$l[r], runvars$adultmort[r], agestage, runvars$coffprop[r], runvars$poorenv[r], runvars$fixedenv[r], runvars$lossperct[r], population)
n.captive.offspring = numberoffspring[1,1]
n.wild.offspring    = numberoffspring[1,2]
#### Captive reproduction #####
coffspring  = NULL
if(g >= runvars$startcap[r] & g <= runvars$endcap[r] & g %% runvars$propnew[r] == 0){
if(n.captive.offspring>0){
cap.pairs   = CaptivePairs(n.captive.offspring, runvars$fecundity[r], runvars$equalcaptive[r], runvars$allonecaptive[r], runvars$capvariation[r], cappop)
coffspring  = CaptiveRepro(cappop, cap.pairs, runvars$RRS[r], runvars$RRSvar[r], fecundity, runvars$maturity[r], g, runvars$nloci[r], population, totalinds)
remove(cap.pairs)
# add captive born individuals to count (if there were any)
if(!is.null(nrow(coffspring))){totalinds = totalinds + length(coffspring[,1]) + 1}
}
}
#### Wild reproduction ####
#get migrants if it is the correct year
migrants = NULL
if(runvars$nimmigrants[r]>0 & g %% runvars$maturity[r] == 0){
# add migrants for the year - all are mature adults
migrants     = Immigrant(runvars$nimmigrants[r], runvars$maturity[r], runvars$lifespan[r], totalinds, runvars$nloci[r], otherpop, g, runvars$RRS[r])
migrants[,5] = mean(population[population[,9]==1,5,drop=FALSE])
population   = rbind(population, migrants)
totalinds    = totalinds + runvars$nimmigrants[r] + 1
}
offspring = NULL
parents   = NULL
repros    = population[population[,9] == 1, ,drop=FALSE] # are alive
if(nrow(repros)>2){
repros = repros[repros[,2] >= runvars$maturity[r], ,drop=FALSE]  # are adults
if(nrow(repros)>2){
if(n.wild.offspring>0){
wild.pairs = Pairs(n.offs = n.wild.offspring, runvars$fecundity[r])
offspring  = Repro(repros, wild.pairs, runvars$RRS[r], runvars$RRSvar[r], runvars$fecundity[r], runvars$maturity[r], g, runvars$nloci[r], population, cappop, totalinds, migrants, runvars$selection[r])
remove(wild.pairs)
# add wild born individuals to IDcount (if there were any)
if(!is.null(nrow(offspring))){
totalinds = totalinds + length(offspring[,1]) + 1
parents   = unique(c(offspring[,3], offspring[,4]))
}
}
}
}
remove(Nt, numberoffspring, n.wild.offspring, n.captive.offspring, repros, migrants)
#### Some more death, add new of year ####
# kill adults that die this year, after reproduction
population = AdultMortality(population, g, runvars$adultmort[r], runvars$killimmat[r], runvars$maturity[r], parents, runvars$lifespan[r], runvars$repro1[r], alldead)
# add new of year to object
population = rbind(population, offspring, coffspring)
remove(parents, offspring, coffspring)
##### Age and write to file ####
# increase age by 1 year
population = AgeUp(population, alldead)
# determine current population size and plot it
if(runvars$plotit[r]==1){
Na      = c(Na, nrow(population[population[,9]==1, ,drop=FALSE]))
alive   = population[population[,9]==1, ,drop=FALSE]
Nadults = c(Nadults, nrow(alive[alive[,2] >= runvars$maturity[r],,drop=FALSE]))
lines(c(0:g), Na , xlab="generation", ylab="population size", cex = 2, lty = 1, col="black", lwd=5)
lines(c(0:g), Nadults , xlab="generation", ylab="population size", cex = 2, lty = 1, col="blue", lwd=5)
remove(alive)
}
# write info for all dead individuals, then remove all dead from population object
AllDead(alldead, population, runvars$outdir[r], r)
alldead <<- 3
population = population[population[,9]==1,,drop=FALSE]
# look for extinct populations (before immigration makes it no longer extinct)
if(nrow(population[population[,9]==1, ,drop=FALSE])<2){break}
}
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation = c(0, 400)           #peak elevation min and max
landscape = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs    = 50                  #number of individuals to simulate
nsteps    = 500                 #number of steps an individual can take
move      = 0.8                 #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
#initialize landscape
land = LandscapeInit(elevation)
image(land)
#initialize landscape
land = LandscapeInit(elevation)
image(land)
#initialize landscape
land = LandscapeInit(elevation)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
points(pop[,1], pop[,2], pch=19, cex=0.5)
pop = rbind(pop,NewPop(nindvs, landscape))
plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
points(pop[,1], pop[,2], pch=19, cex=0.5)
