}
#record new position
mvmt = c(mvmt, xpos, ypos)
mvmt
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
movepath
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
head(pathways)
dim(pathways)
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 20                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,]
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
pdf(paste("butterflypath_", r, ".pdf", sep=""), width=8, height=8)
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
#extract needed output from simulation
write.table(pathways, paste("butterflypath_", r, ".csv", sep=""), row.names=F, col.names=F, sep=",")
dev.off()
}
}
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 20                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,]
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
pdf(paste("butterflypath_", r, ".pdf", sep=""), width=8, height=8)
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
#extract needed output from simulation
write.table(pathways, paste("butterflypath_", r, ".csv", sep=""), row.names=F, col.names=F, sep=",")
dev.off()
}
}
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 20                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,]
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
pdf(paste("butterflypath_", r, ".pdf", sep=""), width=8, height=8)
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
#extract needed output from simulation
write.table(pathways, paste("butterflypath_", r, ".csv", sep=""), row.names=F, col.names=F, sep=",")
dev.off()
}
}
r
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 5                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,]
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
pdf(paste("output/butterflypath_", r, ".pdf", sep=""), width=8, height=8)
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
#extract needed output from simulation
write.table(pathways, paste("output/butterflypath_", r, ".csv", sep=""), row.names=F, col.names=F, sep=",")
dev.off()
}
}
pdf(paste("output/butterflypath_", r, ".pdf", sep=""), width=8, height=8)
pdf(paste(directory, "output/butterflypath_", r, ".pdf", sep=""), width=8, height=8)
pdf(paste(directory, "/output/butterflypath_", r, ".pdf", sep=""), width=8, height=8)
dev.off()
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 5                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,]
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
pdf(paste(directory, "/output/butterflypath_", r, ".pdf", sep=""), width=8, height=8)
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
#extract needed output from simulation
write.table(pathways, paste(directory, "/output/butterflypath_", r, ".csv", sep=""), row.names=F, col.names=F, sep=",")
dev.off()
}
}
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 5                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,]
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
pdf(paste(directory, "/output/butterflypath_", r, ".pdf", sep=""), width=8, height=8)
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
#extract needed output from simulation
write.table(pathways, paste(directory, "/output/butterflypath_", r, ".csv", sep=""), row.names=F, col.names=F, sep=",")
dev.off()
}
}
#extract needed output from simulation
write.table(pathways, paste(directory, "/output/butterflypath_", r, ".csv", sep=""), row.names=F, col.names=F, sep=",")
dev.off()
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 5                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,]
p=1
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
r=1
paste(directory, "/output/butterflypath_", r, ".pdf", sep="")
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
dev.off()
pdf(paste(directory, "/output/butterflypath_", r, ".pdf", sep=""), width=8, height=8)
image(land)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
dev.off()
pdf(paste(directory, "/output/butterflypath_", r, ".pdf", sep=""), width=8, height=8)
image(land)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
dev.off()
#extract needed output from simulation
write.table(pathways, paste(directory, "/output/butterflypath_", r, ".csv", sep=""), row.names=F, col.names=F, sep=",")
NewPop = function(nindvs, landscape){
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=nindvs, ncol=2)
#choose rough starting coordinates
x = sample(1:(landscape-variance), 1)
y = sample(1:(landscape-variance), 1)
#set starting locations with set variance from x,y selected above
pop[,1]  = x + rpois(nindvs, variance)
pop[,2]  = y + rpois(nindvs, variance)
return(pop)
}
#broken code
i = rnorm(10, 0, 1)
i
y = 0
y
for(i in 1:10){
y = y + log(i[,i])
}
i
y = y + log(i[,i])
i[,i]
ii=1
i
#broken code
i = rnorm(10, 0, 1)
i
str(i)
i[ii]
#broken code
i = rnorm(10, 0, 1)
y = 0
for(ii in 1:10){
y = y + log(i[ii])
}
log(i[ii])
setwd("/Users/jannawilloughby/GDrive/ABMs/WILD7400_hilltopping/")
directory = getwd()
outdir    = paste(directory,"/output/", sep="")
source(paste(directory, "/source/FunctionSourcer.R", sep =''))
#parameters
elevation.V = c(0, 400)           #peak elevation min and max
landscape.V = 150                 #number of patches on each side, total patch number = landscape*landscape
nindvs.V    = 50                  #number of individuals to simulate
nsteps.V    = 500                 #number of steps an individual can take
move.V      = c(0.3,0.8)          #decimal likelihood of individual moving to highest neighbor patch (R&G call this q)
reps        = 5                   #number of replicates to run each model
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters = parameters[parameters$elevation!=0,]
for(p in 1:nrow(parameters)){
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
for(r in 1:reps){
pdf(paste(directory, "/output/butterflypath_", r, ".pdf", sep=""), width=8, height=8)
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#plot(-100,-100, xlim=c(0,150), ylim=c(0,150))
#points(pop[,1], pop[,2], pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
rownames(pathways) = seq(1,nindvs,1)
#extract needed output from simulation
write.table(pathways, paste(directory, "/output/butterflypath_", r, ".csv", sep=""), row.names=F, col.names=F, sep=",")
dev.off()
}
}
traceback()
p=r=1
elevation = c(0, parameters$elevation[p])
landscape = parameters$landscape[p]
nindvs    = parameters$nindvs[p]
nsteps    = parameters$nsteps[p]
move      = parameters$move[p]
#initialize landscape
land = LandscapeInit(elevation, landscape)
image(land)
#initialize individuals on landscape
pop = NewPop(nindvs, landscape)
points(pop[,1]/150, pop[,2]/150, pch=19, cex=0.5)
#allow individuals to move within landscape
pathways = NULL
for(i in 1:nrow(pop)){
#isolate individual of interest
indv = pop[i,,drop=FALSE]
#chart movement
movepath = MoveIndv(indv, land, move, nsteps, elevation, landscape)
#plot movement
lines(movepath[seq(1,length(movepath), 2)]/150, movepath[seq(2,length(movepath), 2)]/150, lwd=2)
#record path in single object for all individuals
pathways = rbind(pathways, movepath)
}
head(pop)
range(pop[,1])
range(pop[,2])
#how far apart should individuals be, at max?
variance = 25 #values is in cells
#initialize pop object
pop = matrix(nrow=nindvs, ncol=2)
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters[1,1]
View(parameters)
parameters[1,4]
View(parameters)
parameters[ ,5]
parameters[2,]
test=c(1,2,3)
test
test[2]
parameters[parameters$elevation!=0,]
parameters[parameters$elevation!=0]
parameters = expand.grid(elevation.V,landscape.V,nindvs.V,nsteps.V,move.V)
colnames(parameters) = c("elevation","landscape","nindvs","nsteps","move")
parameters
parameters = parameters[parameters$elevation!=0,]
parameters
